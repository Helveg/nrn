#=============================================================================
# Azure Pipeline NEURON settings
#=============================================================================
jobs:
#- job: 'NativeBuilds'
#  strategy:
#    matrix:
#      Python27-Ubuntu16:
#        python.version: '2.7'
#        image.name: 'ubuntu-16.04'
#      Python35-Ubuntu16:
#        python.version: '3.5'
#        image.name: 'ubuntu-16.04'
#      Python37-Ubuntu18:
#        python.version: '3.7'
#        image.name: 'ubuntu-18.04'
#      Python36-OSX14:
#        python.version: '3.6'
#        image.name: 'macOS-10.14'
#      Python38-OSX15:
#        python.version: '3.8'
#        image.name: 'macOS-10.15'
#  variables:
#     INSTALL_DIR: $(Agent.HomeDirectory)/install
#  pool:
#    vmImage: $(image.name)
#  steps:
#  - script: |
#      sudo apt update
#      sudo apt install -y flex bison doxygen libopenmpi-dev \
#                          libmpich-dev libx11-dev libxcomposite-dev \
#                          mpich openmpi-bin libncurses-dev
#    condition: eq(variables['agent.os'], 'Linux')
#    displayName: 'Install Linux System Depdendencies'
#  - script: |
#      brew cask install xquartz
#      brew install flex bison doxygen mpich
#      brew unlink mpich && brew install openmpi
#      echo $'[install]\nprefix='>$(Agent.HomeDirectory)/.pydistutils.cfg
#    condition: eq(variables['agent.os'], 'Darwin')
#    displayName: 'Install OSX System Depdendencies'
#  - template: azure-build.yml
#
#variables:
#  MANYLINUX_NRN_CONTAINER: neuronsimulator/neuron_wheel
#  MACOSX_DEPLOYMENT_TARGET: 10.9

  #- job: 'ManyLinuxWheels'
  #  pool:
  #    vmImage: 'ubuntu-18.04'
  #  steps:
  #  - script: |
  #      docker run --rm \
  #        -w /root/nrn \
  #        -v $PWD:/root/nrn \
  #        'neuronsimulator/neuron_wheel' \
  #        packaging/python/build_wheels.bash linux
  #    displayName: Building ManyLinux Wheels
  #  - script: |
  #      ls -lh wheelhouse/
  #    displayName: Show and copy wheels
  #
- job: 'MacOSWheels'
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix:
      #Python35:
      #  python.version: '3.5.4'
      #Python36:
      #  python.version: '3.6.8'
      Python37:
        python.version: '3.7.7'
        #Python38:
        #python.version: '3.8.2'
  variables:
    SKIP_EMBEDED_PYTHON_TEST: true
  steps:
  - checkout: self
    submodules: false
  - script: |
      set -e -x
      if [ "$(python.version)" == "3.5.4" ]; then
        installer=python-$(python.version)-macosx10.6.pkg
      else
        installer=python-$(python.version)-macosx10.9.pkg
      fi
      url=https://www.python.org/ftp/python/$(python.version)/$installer
      #curl $url > $installer
      #sudo installer -pkg $installer -target /
      #sudo rm /usr/local/bin/python
      #ls /usr/local/bin/python* || echo "No python"
      #sudo ln -s /usr/local/bin/python3.7 /usr/local/bin/python
    displayName: 'Install Python from python.org'
  - script: |
      #brew cask install xquartz
      brew install flex bison mpich
      brew unlink mpich && brew install openmpi
    displayName: 'Install OSX System Depdendencies'
  - script: |
      export MACOSX_DEPLOYMENT_TARGET=10.9
      export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH
      export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
      #packaging/python/build_wheels.bash osx
    displayName: 'Building MacOS Wheel'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - script: |
      set -x
      #sudo rm /usr/local/bin/python
      #sudo ln -s /usr/local/bin/python3 /usr/local/bin/python
      python --version
      python -c "import sys; print (sys.version)"
      #brew install python
      #python --version
      #/Library/Frameworks/Python.framework/Versions/3.7/bin/python3 --version
      #/Library/Frameworks/Python.framework/Versions/3.7/bin/python3 -m pip install numpy
      packaging/python/test_wheels.sh $(which python) '-i https://test.pypi.org/simple/ neuron'
      #packaging/python/test_wheels.sh /Library/Frameworks/Python.framework/Versions/3.7/bin/python3 '-i https://test.pypi.org/simple/ neuron'
      #packaging/python/test_wheels.sh /Library/Frameworks/Python.framework/Versions/3.7/bin/python3 wheelhouse/*.whl
      #packaging/python/test_wheels.sh $(which python) wheelhouse/*.whl
    displayName: 'Test Wheel'
  - task: TwineAuthenticate@1
    inputs:
      pythonUploadServiceConnection: AzureNeuronTestPypi
  - script: |
      set -x
      python -m pip install twine
      cat $(PYPIRC_PATH) || echo "HELL"
      #python -m twine upload --verbose --skip-existing -r neurontestpypi --config-file $(PYPIRC_PATH) wheelhouse/*.whl
    displayName: 'Upload wheel to test.pypi.org'
