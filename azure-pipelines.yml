#=============================================================================
# Azure Pipeline settings
#=============================================================================

# Used for neuron-nightly wheel
variables:
  NEURON_NIGHTLY_TAG: '-nightly'

# Nightly build master for pypi upload
schedules:
- cron: "0 0 * * *"
  branches:
    include:
    - master
  always: true

# Auto cancel old PR builds
pr:
  autoCancel: true

# Trigger build for certain branches only
trigger:
- master
- releases/*
- pramodk/azure-windows-ci

jobs:

- job: 'ManyLinuxWheels'
  condition: eq(1,2)
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
  steps:
  - script: |
      docker run --rm \
        -w /root/nrn \
        -v $PWD:/root/nrn \
        -e NEURON_NIGHTLY_TAG \
        'neuronsimulator/neuron_wheel' \
        packaging/python/build_wheels.bash linux $(python.version)
    displayName: 'Building ManyLinux Wheel'

  - script: |
      sudo apt update
      sudo apt install -y mpich openmpi-bin libopenmpi-dev libmpich-dev
    displayName: 'Install Test System Depdendencies'

  - template: ci/azure-wheel-test-upload.yml


# Jobs to build OSX wheels natively
- job: 'MacOSWheels'
  condition: eq(1,2)
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
        python.org.version: '3.5.4'
      Python36:
        python.version: '3.6'
        python.org.version: '3.6.8'
      Python37:
        python.version: '3.7'
        python.org.version: '3.7.7'
      Python38:
        python.version: '3.8'
        python.org.version: '3.8.2'
  steps:

  - script: |
      if [ "$(python.org.version)" == "3.5.4" ]; then
        installer=python-$(python.org.version)-macosx10.6.pkg
      else
        installer=python-$(python.org.version)-macosx10.9.pkg
      fi
      url=https://www.python.org/ftp/python/$(python.org.version)/$installer
      curl $url -o $installer
      sudo installer -pkg $installer -target /
    displayName: 'Install Python from python.org'

  - script: |
      brew cask install xquartz
      brew install flex bison mpich
      brew unlink mpich && brew install openmpi
    displayName: 'Install OSX System Depdendencies'

  - script: |
      export MACOSX_DEPLOYMENT_TARGET=10.9
      export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH
      export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
      packaging/python/build_wheels.bash osx $(python.version)
    displayName: 'Build MacOS Wheel'

  - template: ci/azure-wheel-test-upload.yml

- job: 'WindowsInstaller'
  pool:
    vmImage: windows-2019
  variables:
    MSYS2_ROOT: C:\msys64
  continueOnError: false
  steps:
    - task: BatchScript@1
      inputs:
        filename: ci/win_download_deps.cmd
      displayName: "Download Dependencies"
      condition: and(succeeded(), eq(1,1))
    - script: |
        :: install python
        python-3.5.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\Python35
        python-3.6.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\Python36
        python-3.7.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\Python37
        python-3.8.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\Python38
        start /wait msiexec /i python-2.7.msi /norestart /qn TARGETDIR="C:\Python27" ADDLOCAL=ALL
        :: install numpy
        C:\Python35\python.exe -m pip install numpy
        C:\Python36\python.exe -m pip install numpy
        C:\Python37\python.exe -m pip install numpy
        C:\Python38\python.exe -m pip install numpy
        C:\Python27\python.exe -m pip install numpy
        :: install nsis
        nsis-3-05.exe /S
        pwsh -command Expand-Archive EnVar_pugin.zip -DestinationPath "${env:ProgramFiles(x86)}\NSIS"
        :: install mpi
        msmpisetup.exe -unattend -installroot C:\msmpi
        start /wait msiexec /i msmpisdk.msi /norestart /qn INSTALLDIR="C:\msmpi" ADDLOCAL=ALL
        rename C:\msmpi\Bin  bin
        rename C:\msmpi\Lib  lib
        rename C:\msmpi\Include include
        copy "c:\Windows\System32\msmpi.dll" "c:\msmpi\lib\x64\msmpi.dll"
        copy "c:\Windows\SysWoW64\msmpi.dll" "c:\msmpi\lib\x86\msmpi.dll"
        :: copy files to necessary directories
        cp 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe' 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\'
        cp 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\rcdll.dll' 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\'
      condition: and(succeeded(), eq(1,1))
      displayName: "Install Depdendencies"
    - script: |
        set PATH=%MSYS2_ROOT%\usr\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem
        choco install --no-progress msys2 --params="/InstallDir:%MSYS2_ROOT% /NoUpdate /NoPath"
        %MSYS2_ROOT%\usr\bin\pacman --noconfirm --needed -S --disable-download-timeout ^
        git ^
        zip ^
        unzip ^
        base-devel ^
        mingw-w64-x86_64-cmake ^
        mingw-w64-x86_64-ncurses ^
        mingw-w64-x86_64-readline ^
        mingw-w64-x86_64-python2 ^
        mingw-w64-x86_64-python3 ^
        mingw64/mingw-w64-x86_64-cython ^
        mingw-w64-x86_64-python3-setuptools ^
        mingw-w64-x86_64-python3-pip ^
        mingw-w64-x86_64-toolchain
      displayName: "Install MSYS & MING2 Packages"
      condition: and(succeeded(), eq(1,1))
    - script: |
        %MSYS2_ROOT%\usr\bin\bash -lc "$BUILD_SOURCESDIRECTORY/build_azure.sh"
      displayName: "Build and Create Installer"
      condition: and(succeeded(), eq(1,1))
    - script: |
        .\build\src\mswin\nrn8.0setup-AMD64.exe /S
        dir C:\nrn\lib\python\neuron
      displayName: "Install Installer"
      condition: and(succeeded(), eq(1,1))
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.7'
      displayName: "Choose System Python"
    - task: BatchScript@1
      inputs:
        filename: ci/win_test_release.cmd
      displayName: "Test Installer"
      condition: and(succeeded(), eq(1,1))
    - task: GithubRelease@0
      inputs:
        gitHubConnection: pramodk-nrn-fork
        repositoryName: pramodk/nrn
        action: edit
        tagSource: manual
        tag: nightly
        title: 'Nightly NEURON Release'
        isPreRelease: true
        assetUploadMode: replace
        addChangeLog: true
        assets: |
          $(Build.SourcesDirectory)\build\src\mswin\nrn8.0setup-AMD64.exe
      displayName: 'Upload Installer'
      condition: and(succeeded(), in(variables['Build.Reason'], 'Manual', 'Schedule', 'IndividualCI', 'PullRequest'))
