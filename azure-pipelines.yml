#=============================================================================
# Azure Pipeline settings
#=============================================================================

# Used for neuron-nightly wheel
variables:
  NEURON_NIGHTLY_TAG: '-nightly'

# Nightly build master for pypi upload
schedules:
- cron: "0 0 * * *"
  branches:
    include:
    - master

# Auto cancel old PR builds
pr:
  autoCancel: true

# Trigger build for certain branches only
trigger:
- master
- releases/*

jobs:

- job: 'ManyLinuxWheels'
  condition: eq(1,2)
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
  steps:
  - script: |
      docker run --rm \
        -w /root/nrn \
        -v $PWD:/root/nrn \
        -e NEURON_NIGHTLY_TAG \
        'neuronsimulator/neuron_wheel' \
        packaging/python/build_wheels.bash linux $(python.version)
    displayName: 'Building ManyLinux Wheel'

  - script: |
      sudo apt update
      sudo apt install -y mpich openmpi-bin libopenmpi-dev libmpich-dev
    displayName: 'Install Test System Depdendencies'

  - template: ci/azure-wheel-test-upload.yml


# Jobs to build OSX wheels natively
- job: 'MacOSWheels'
  condition: eq(1,2)
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
        python.org.version: '3.5.4'
      Python36:
        python.version: '3.6'
        python.org.version: '3.6.8'
      Python37:
        python.version: '3.7'
        python.org.version: '3.7.7'
      Python38:
        python.version: '3.8'
        python.org.version: '3.8.2'
  steps:

  - script: |
      if [ "$(python.org.version)" == "3.5.4" ]; then
        installer=python-$(python.org.version)-macosx10.6.pkg
      else
        installer=python-$(python.org.version)-macosx10.9.pkg
      fi
      url=https://www.python.org/ftp/python/$(python.org.version)/$installer
      curl $url -o $installer
      sudo installer -pkg $installer -target /
    displayName: 'Install Python from python.org'

  - script: |
      brew cask install xquartz
      brew install flex bison mpich
      brew unlink mpich && brew install openmpi
    displayName: 'Install OSX System Depdendencies'

  - script: |
      export MACOSX_DEPLOYMENT_TARGET=10.9
      export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH
      export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
      packaging/python/build_wheels.bash osx $(python.version)
    displayName: 'Build MacOS Wheel'

  - template: ci/azure-wheel-test-upload.yml

- job: 'WindowsInstaller'
  pool:
    vmImage: windows-2019
  variables:
    MSYS2_ROOT: C:\msys64
    MSYS2_ARCH: x86_64
    COMPILER: gcc
    HTTP_RETRIES: 4
  steps:
    - pwsh: |
        Get-Childitem 'C:\' -depth 1 -directory
      displayName: "Show Directory Structure (Begin)"
    - script: |
        choco install msys2 --no-progress
      displayName: "In Msys"
    - script: |
        set MSYS2_PATH_TYPE=inherit
        C:\tools\msys64\usr\bin\bash -lc "echo $PWD; ls; mkdir -p $BUILD_SOURCESDIRECTORY/YYYYYYYYYY; ls;"
        echo "--------------------------"
        dir .
        echo "--------------------------"
        C:\tools\msys64\usr\bin\mintty.exe -w hide /bin/env MSYSTEM=MINGW64 /bin/bash -lc "mkdir -p $BUILD_SOURCESDIRECTORY/XXXXXXXXXXXXXXXXXXXX"
        dir .
        echo "--------------------------"
      displayName: "Dir create"
    - script: |
        choco install msys2 --params="/InstallDir:%MSYS2_ROOT% /NoUpdate /NoPath"
      displayName: "Install MSYS2"
    - script: |
        dir .
        C:\msys64\usr\bin\mintty.exe -w hide  /bin/env MSYSTEM=MINGW64 /bin/bash -lc "ls &> ls.log"
        cat ls.log
        C:\msys64\usr\bin\mintty.exe -w hide  /bin/env MSYSTEM=MINGW64 /bin/bash -lc "build_azure.sh &> build.log "
        dir .
        cat build.log
      displayName: "Attempt Installation"
    - script: |
        choco install --no-progress nsis --version 3.04 -y --allow-downgrade
      displayName: "Install NSIS"
    - script: |
        SET
        %MSYS2_ROOT%\usr\bin\bash -lc "echo $PWD; env;"
        %MSYS2_ROOT%\usr\bin\bash -lc "echo $PWD; cd $BUILD_SOURCESDIRECTORY; ls; echo $PWD;"
      displayName: "Extra Check"
    - pwsh: |
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile msmpisetup.exe https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile msmpisdk.msi https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisdk.msi
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.5.4.exe https://www.python.org/ftp/python/3.5.4/python-3.5.4-amd64.exe
        #Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.6.8.exe https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe
        #Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.7.7.exe https://www.python.org/ftp/python/3.7.7/python-3.7.7-amd64.exe
        #Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.8.2.exe https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe
      displayName: "Download Installers"
    - script: |
        msmpisetup.exe -unattend -installroot C:\ms-mpi
        msmpisdk.msi /passive
        :: unify installation directory
        rename C:\ms-mpi\Bin  bin
        xcopy.exe "C:\Program Files (x86)\Microsoft SDKs\MPI\Include" "C:\ms-mpi\include\" /s /e /h
        xcopy.exe "C:\Program Files (x86)\Microsoft SDKs\MPI\Lib" "C:\ms-mpi\lib\" /s /e /h
        ::move "C:\Program Files (x86)\Microsoft SDKs\MPI\Include" "C:\ms-mpi\include"
        ::move "C:\Program Files (x86)\Microsoft SDKs\MPI\Lib" "C:\ms-mpi\lib"
        copy "c:\Windows\System32\msmpi.dll" "c:\ms-mpi\lib\x64\msmpi.dll"
        copy "c:\Windows\SysWoW64\msmpi.dll" "c:\ms-mpi\lib\x86\msmpi.dll"
        dir C:\ms-mpi
      displayName: "Install MPI"
    - script: |
        python-3.5.4.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python354
        ::python-3.6.8.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python368
        ::python-3.7.7.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python377
        ::python-3.8.2.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python382
        C:\python354\python.exe -m pip install numpy
        ::C:\python368\python.exe -m pip install numpy
        ::C:\python377\python.exe -m pip install numpy
        ::C:\python382\python.exe -m pip install numpy
        dir c:\
      displayName: "Install Python"
    - script: |
        set PATH=%MSYS2_ROOT%\usr\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem
        ::%MSYS2_ROOT%\usr\bin\pacman --noconfirm -Syyuu
        ::%MSYS2_ROOT%\usr\bin\pacman --noconfirm -Syuu
      displayName: "Update MSYS2"
    - script: |
        set PATH=%MSYS2_ROOT%\usr\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem
        if %COMPILER%==gcc ( set "TOOLCHAIN=mingw-w64-%MSYS2_ARCH%-toolchain" ) else ( set "TOOLCHAIN=mingw-w64-%MSYS2_ARCH%-clang" )
        %MSYS2_ROOT%\usr\bin\pacman --noconfirm --needed -S ^
        git ^
        zip ^
        unzip ^
        base-devel ^
        mingw-w64-%MSYS2_ARCH%-cmake ^
        mingw-w64-%MSYS2_ARCH%-ncurses ^
        mingw-w64-%MSYS2_ARCH%-readline ^
        mingw-w64-%MSYS2_ARCH%-python2 ^
        mingw-w64-%MSYS2_ARCH%-python3 ^
        mingw64/mingw-w64-%MSYS2_ARCH%-cython ^
        mingw-w64-%MSYS2_ARCH%-python3-setuptools ^
        mingw-w64-%MSYS2_ARCH%-python3-pip ^
        %TOOLCHAIN%
      displayName: "Install MING2 Packages"
    - pwsh: |
        Get-Childitem 'C:\' -depth 1 -directory
      displayName: "Show Directory Structure (End)"
